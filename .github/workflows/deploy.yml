name: Deploy to Amazon Linux EC2 (compose-prod)

on:
  push:
    branches: [ main ]   # main 브랜치 푸시 시 배포
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # 2) JDK 설치 (Spring 빌드)
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3) Gradle 빌드 (테스트 생략 예시)
      - name: Build Spring Boot
        run: ./gradlew clean build -x test

      # 4) EC2로 파일 전송 (단, .env 제외)
      - name: Upload artifacts to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: |
            docker-compose-prod.yml
            backendProject/Dockerfile
            backendProject/build/libs/*.jar
          target: ${{ secrets.EC2_APP_DIR }}

      # 5) EC2에서 배포 (Amazon Linux)
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            APP_DIR="${{ secrets.EC2_APP_DIR }}"
            cd "$APP_DIR"

            # ---- 여기서 .env 파일 생성 ----
            cat << 'EOF' > .env
            ${{ secrets.EC2_ENV_FILE }}
            EOF

            # Docker/compose 설치(없을 때)
            if ! command -v docker >/dev/null 2>&1; then
              if command -v dnf >/dev/null 2>&1; then
                sudo dnf -y update
                sudo dnf -y install docker
              else
                sudo yum -y update
                sudo yum -y install docker
              fi
              sudo systemctl enable docker
              sudo systemctl start docker
              sudo usermod -aG docker ec2-user || true
            fi
            if ! docker compose version >/dev/null 2>&1; then
              if command -v dnf >/dev/null 2>&1; then
                sudo dnf -y install docker-compose-plugin
              else
                sudo yum -y install docker-compose-plugin || true
              fi
            fi

            # 기존 컨테이너 중지 후 재빌드/재기동
            sudo docker compose -f docker-compose-prod.yml down || true
            sudo docker compose -f docker-compose-prod.yml build --no-cache
            sudo docker compose -f docker-compose-prod.yml up -d

            # (옵션) 안 쓰는 이미지 정리
            sudo docker image prune -f

      # 6) (선택) CloudFront 캐시 무효화
      - name: Set CloudFront ID as env var
        run: echo "CF_ID=${{ secrets.CF_DISTRIBUTION_ID }}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        if: env.CF_ID != ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Invalidate CloudFront
        if: env.CF_ID != ''
        run: |
          aws cloudfront create-invalidation \
            --distribution-id "${{ env.CF_ID }}" \
            --paths "/*"
