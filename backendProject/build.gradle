plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'likelion.mlb'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	runtimeOnly 'org.postgresql:postgresql'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	/* dev tools */
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// Redis 기본 연동 (Lettuce 사용)
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// WebSocket
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	// 문자열 직렬화에 필요
	implementation 'org.springframework:spring-context-support'

	/* Swagger UI */
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0"

	/* Redis-Cache */
	implementation 'org.springframework.boot:spring-boot-starter-cache'

	/* ElasticSearch */
	implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
	implementation 'co.elastic.clients:elasticsearch-java:8.13.0'

	/* WebSocket */
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	/* JSONObject */
	implementation 'org.json:json:20240303'

	/* env 파일 springboot 에서 사용을 위해 */
	implementation 'me.paulschwarz:spring-dotenv:4.0.0'

}

tasks.named('test') {
	useJUnitPlatform()
}
